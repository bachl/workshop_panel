[
["fixed-effects-modelle.html", "Abschnitt 3 Fixed effects Modelle 3.1 Konzeptionelle Einführung", " Abschnitt 3 Fixed effects Modelle 3.1 Konzeptionelle Einführung Im ersten Teil des Abschnitts zu fixed effects Modellen beschäftigen wir uns mit den Grundlagen der Modellierung. Dazu nutzen wir die bekannte Funktion stats::lm() (übliche OLS-Schätzung linearer Modelle in R). Wie können wir den kauselen (within-person) Effekt mit Paneldaten schätzen? Separate OLS Modelle für jede Person schätzen und Koeffizeinten mitteln (no pooling). Alle \\(X\\) und \\(Y\\) Variablen um die Mittelwerte der Person zentrieren (within transformation). Dummy-Variablen für jede Person in das Regressionsmodell aufnehmen (least squares dummy variables [LSDV] estimation). Alle drei Varianten entfernen die (beobachteten und nicht beobachten,) über die Zeit konstanten Unterschiede zwischen den Personen. Varianten 2 und 3 entsprechen dem klassischen fixed effects Modell. Die Unterschiede zwischen den Personen werden kontrolliert, indem die personenspezifischen Mittelwerte vor der Schätzung entfernt werden (2) oder für jede Person im Modell geschätzt werden (3). \\(y_{it}-\\bar{y_{i}} = (x_{it} - \\bar{x_{i}})&#39;\\beta + (u_{it} - \\bar{u_{i}})\\) oder \\(y_{it} = \\beta&#39; x_{it}&#39; + \\alpha_i + u_{it}\\) In Variante 1 dürfen die kausalen within-person Effekte zwischen den Personen variieren. Unter der Annahme homogener Treatment-Effekte (entspricht der typischen Annahme im randomisierten Between-Subject-Experiment) entspricht das Ergebnis asymptotisch den Varianten 2 und 3. Der Schätzer ist aber weniger effizient, da zufällige Unterschiede in den Effekten zwischen den Personen aufgegriffen werden. Im letzten Teil des Abschnitts zum within-between-Modell kommen wir auf diesen Punkt zurück, wenn wir die Annahme homogener Treatment-Effekte lockern. No pooling n = 8 t = 6 tce = 1 example_data = tibble(id = 1:n, z = seq(-3, 3, length.out = n), m_beer = z * 1 + rnorm(n)) %&gt;% replicate(t, ., simplify = FALSE) %&gt;% bind_rows() %&gt;% mutate(beer = m_beer + rnorm(n * t), beer = beer + abs(min(beer)), hangover = beer * tce + z * -2 + rnorm(n * t)) example_data %&gt;% group_by(id) %&gt;% nest() %&gt;% mutate(mdls = map(data, ~tidy(lm(hangover ~ beer, data = .x)))) %&gt;% unnest(mdls) %&gt;% ungroup() %&gt;% select(-data) %&gt;% filter(term == &quot;beer&quot;) %&gt;% mutate_if(is.numeric, round, 2) ## # A tibble: 8 x 6 ## id term estimate std.error statistic p.value ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 beer 0.76 0.37 2.04 0.11 ## 2 2 beer 0.02 0.79 0.02 0.98 ## 3 3 beer 1.05 0.2 5.27 0.01 ## 4 4 beer 0.84 0.64 1.31 0.26 ## 5 5 beer 1.14 0.44 2.58 0.06 ## 6 6 beer 0.99 0.52 1.88 0.13 ## 7 7 beer 2.95 0.33 9 0 ## 8 8 beer 1.64 0.21 7.64 0 "]
]
